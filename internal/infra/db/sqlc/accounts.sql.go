// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    id,
    owner_id,
    currency_id,
    balance

)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateAccountParams struct {
	ID         int32
	OwnerID    pgtype.Int4
	CurrencyID pgtype.Int4
	Balance    pgtype.Int8
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (int32, error) {
	row := q.db.QueryRow(ctx, CreateAccount,
		arg.ID,
		arg.OwnerID,
		arg.CurrencyID,
		arg.Balance,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const DeleteAccount = `-- name: DeleteAccount :one
DELETE FROM
    accounts
WHERE
    id = $1
RETURNING id AS res
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, DeleteAccount, id)
	var res int32
	err := row.Scan(&res)
	return res, err
}

const SelectAccount = `-- name: SelectAccount :one
SELECT
    id,
    owner_id,
    currency_id,
    balance
FROM
    accounts
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) SelectAccount(ctx context.Context, id int32) (Accounts, error) {
	row := q.db.QueryRow(ctx, SelectAccount, id)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CurrencyID,
		&i.Balance,
	)
	return i, err
}

const UpdateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET
    owner_id = $1,
    currency_id = $2,
    balance = $3
WHERE id = $4
RETURNING id AS res
`

type UpdateAccountParams struct {
	OwnerID    pgtype.Int4
	CurrencyID pgtype.Int4
	Balance    pgtype.Int8
	ID         int32
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (int32, error) {
	row := q.db.QueryRow(ctx, UpdateAccount,
		arg.OwnerID,
		arg.CurrencyID,
		arg.Balance,
		arg.ID,
	)
	var res int32
	err := row.Scan(&res)
	return res, err
}
