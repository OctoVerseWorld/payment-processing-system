// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: banks.sql

package sqlc

import (
	"context"
)

const CreateBank = `-- name: CreateBank :one
INSERT INTO banks (
    id,
    planet_id,
    organization_id,
    name
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateBankParams struct {
	ID             int16
	PlanetID       int32
	OrganizationID int32
	Name           string
}

func (q *Queries) CreateBank(ctx context.Context, arg CreateBankParams) (int16, error) {
	row := q.db.QueryRow(ctx, CreateBank,
		arg.ID,
		arg.PlanetID,
		arg.OrganizationID,
		arg.Name,
	)
	var id int16
	err := row.Scan(&id)
	return id, err
}

const DeleteBank = `-- name: DeleteBank :exec
DELETE FROM
    banks
WHERE
    id = $1
`

func (q *Queries) DeleteBank(ctx context.Context, id int16) error {
	_, err := q.db.Exec(ctx, DeleteBank, id)
	return err
}

const SelectBankByID = `-- name: SelectBankByID :one
SELECT
    id,
    planet_id,
    organization_id,
    name
FROM
    banks
WHERE
    id = $1
`

func (q *Queries) SelectBankByID(ctx context.Context, id int16) (Banks, error) {
	row := q.db.QueryRow(ctx, SelectBankByID, id)
	var i Banks
	err := row.Scan(
		&i.ID,
		&i.PlanetID,
		&i.OrganizationID,
		&i.Name,
	)
	return i, err
}

const SelectBanksByPlanetID = `-- name: SelectBanksByPlanetID :many
SELECT
    id,
    planet_id,
    organization_id,
    name
FROM
    banks
WHERE
    planet_id = $1
`

func (q *Queries) SelectBanksByPlanetID(ctx context.Context, planetID int32) ([]Banks, error) {
	rows, err := q.db.Query(ctx, SelectBanksByPlanetID, planetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Banks{}
	for rows.Next() {
		var i Banks
		if err := rows.Scan(
			&i.ID,
			&i.PlanetID,
			&i.OrganizationID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBankName = `-- name: UpdateBankName :exec
UPDATE banks SET
    name = $1
WHERE id = $2
`

type UpdateBankNameParams struct {
	Name string
	ID   int16
}

func (q *Queries) UpdateBankName(ctx context.Context, arg UpdateBankNameParams) error {
	_, err := q.db.Exec(ctx, UpdateBankName, arg.Name, arg.ID)
	return err
}
